name: Java CD with Gradle

on:
  push:
    branches: [ "main" ]
    
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'     
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.TOKEN }}
        submodules: true
        
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle Wrapper
      run: ./gradlew build -x test

    - name: Extract version from gradle.properties
      id: extract_version
      run: |
        VERSION=$(./gradlew properties -q | grep 'version:' | awk '{print $2}')
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Verify extracted version
      run: echo "The extracted version is ${{ env.VERSION }}"
      
    - name: DockerHub Login
      uses: docker/login-action@v3.3.0
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Docker image Build
      run: |
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}:${{ env.VERSION }} .
        docker tag ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}:${{ env.VERSION }} ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}:latest

    - name: DockerHub push
      run: |
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}:${{ env.VERSION }}
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          port: ${{ secrets.SERVER_PORT }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          
          script: |
            cd ./remind-me
            docker-compose pull
            docker-compose up -d
            docker image prune -a -f
